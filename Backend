Imports Microsoft.Data.SqlClient ' Ensure only Microsoft.Data.SqlClient is used
Imports System.Windows.Forms

Public Class Form1

    ' Database connection string
    Dim ConnectionString As String = "Server=localhost;Database=Test_Albin;Trusted_Connection=True;TrustServerCertificate=True;"
    Dim Connection As SqlConnection

    ' Form Load Event
    Private Sub Form1_Load(sender As Object, e As EventArgs) Handles MyBase.Load
        ' Initialize the connection
        Connection = New SqlConnection(ConnectionString)
        Connection.Open()

        ' Populate initial ComboBox and DataGridView data
        ComboBox1.SelectedIndex = -1
        PopulateCust_Code()
        PopulateInv_No()
        PopulatePrdCd()

        ' Add blank rows to DataGridView
        For i As Integer = 1 To 3
            DataGridView1.Rows.Add()
        Next

        ' Set initial state
        SetEditMode(False)
    End Sub

    ' Form Closing Event
    Private Sub Form1_FormClosing(sender As Object, e As FormClosingEventArgs) Handles MyBase.FormClosing
        ' Close the connection
        If Connection IsNot Nothing AndAlso Connection.State = ConnectionState.Open Then
            Connection.Close()
        End If
    End Sub

    ' Populate customer codes in ComboBox2
    Private Sub PopulateCust_Code()
        ComboBox2.Items.Clear()
        Using Command As New SqlCommand("SELECT Cust_Code FROM dbo.Customer", Connection)
            Using Reader As SqlDataReader = Command.ExecuteReader()
                While Reader.Read()
                    ComboBox2.Items.Add(Reader("Cust_Code").ToString())
                End While
            End Using
        End Using
    End Sub

    ' Populate invoice numbers in ComboBox1
    Private Sub PopulateInv_No()
        ComboBox1.Items.Clear()
        Using Command As New SqlCommand("SELECT Inv_No FROM dbo.Inv_Header", Connection)
            Using Reader As SqlDataReader = Command.ExecuteReader()
                While Reader.Read()
                    ComboBox1.Items.Add(Reader("Inv_No").ToString())
                End While
            End Using
        End Using
    End Sub

    ' Populate product codes in the Product ComboBox
    Private Sub PopulatePrdCd()
        Dim prdCdColumn As DataGridViewComboBoxColumn = CType(DataGridView1.Columns("PrdCd"), DataGridViewComboBoxColumn)
        prdCdColumn.Items.Clear()
        Using Command As New SqlCommand("SELECT Prod_Code FROM dbo.Product", Connection)
            Using Reader As SqlDataReader = Command.ExecuteReader()
                While Reader.Read()
                    prdCdColumn.Items.Add(Reader("Prod_Code").ToString())
                End While
            End Using
        End Using
    End Sub

    ' Update the total amount based on DataGridView values
    Private Sub UpdateTotalAmount()
        Dim total As Decimal = 0

        For Each row As DataGridViewRow In DataGridView1.Rows
            If Not row.IsNewRow Then
                Dim amount As Decimal = 0
                Decimal.TryParse(row.Cells("Amount").Value?.ToString(), amount)
                total += amount
            End If
        Next

        TotalAmount.Text = total.ToString("F2") ' Format to 2 decimal places
    End Sub

    ' Auto-generate serial numbers for rows
    Private Sub DataGridView1_RowPostPaint(sender As Object, e As DataGridViewRowPostPaintEventArgs) Handles DataGridView1.RowPostPaint
        For Each row As DataGridViewRow In DataGridView1.Rows
            row.Cells("Lno").Value = row.Index + 1
        Next
    End Sub

    ' Populate customer details based on selected customer code
    Private Sub ComboBox2_SelectedIndexChanged(sender As Object, e As EventArgs) Handles ComboBox2.SelectedIndexChanged
        If ComboBox2.SelectedItem Is Nothing Then Return

        Dim selectedCustCode As String = ComboBox2.SelectedItem.ToString()

        Using Command As New SqlCommand("SELECT Cust_Name, Cust_Add1 FROM Customer WHERE Cust_Code = @CustCode", Connection)
            Command.Parameters.AddWithValue("@CustCode", selectedCustCode)
            Using Reader As SqlDataReader = Command.ExecuteReader()
                If Reader.Read() Then
                    TxtName.Text = Reader("Cust_Name").ToString()
                    TxtAddress.Text = Reader("Cust_Add1").ToString()
                End If
            End Using
        End Using
    End Sub

    ' Handle DataGridView cell editing and update corresponding fields
    Private Sub DataGridView1_CellEndEdit(sender As Object, e As DataGridViewCellEventArgs) Handles DataGridView1.CellEndEdit
        Dim currentRow = DataGridView1.Rows(e.RowIndex)

        Try
            If e.ColumnIndex = DataGridView1.Columns("PrdCd").Index Then ' Prd_Cd column index
                Dim prdCd As String = currentRow.Cells("PrdCd").Value?.ToString()
                If String.IsNullOrEmpty(prdCd) Then
                    MessageBox.Show("Product Code cannot be empty.", "Validation Error", MessageBoxButtons.OK, MessageBoxIcon.Error)
                    Return
                End If

                Using Command As New SqlCommand("SELECT Prod_Name, Prod_Price FROM dbo.Product WHERE Prod_Code = @Prod_Code", Connection)
                    Command.Parameters.AddWithValue("@Prod_Code", prdCd)
                    Using Reader As SqlDataReader = Command.ExecuteReader()
                        If Reader.Read() Then
                            currentRow.Cells("Description").Value = Reader("Prod_Name").ToString()
                            currentRow.Cells("Unit_Price").Value = Reader("Prod_Price").ToString()
                        End If
                    End Using
                End Using
            End If

            If e.ColumnIndex = DataGridView1.Columns("Qty").Index Then ' Qty column index
                Dim qty As Decimal = 0
                Dim unitPrice As Decimal = 0

                If Not Decimal.TryParse(currentRow.Cells("Qty").Value?.ToString(), qty) OrElse Not Decimal.TryParse(currentRow.Cells("Unit_Price").Value?.ToString(), unitPrice) Then
                    MessageBox.Show("Invalid quantity or unit price.", "Validation Error", MessageBoxButtons.OK, MessageBoxIcon.Error)
                    Return
                End If

                currentRow.Cells("Amount").Value = qty * unitPrice
                UpdateTotalAmount()
            End If
        Catch ex As Exception
            MessageBox.Show("Error updating cell values: " & ex.Message)
        End Try
    End Sub

    ' Validate and adjust the entered date
    Private Sub TxtDate_Validating(sender As Object, e As EventArgs) Handles TxtDate.Validating
        Dim enteredDate As DateTime

        If Not String.IsNullOrEmpty(TxtDate.Text) AndAlso DateTime.TryParse(TxtDate.Text, enteredDate) Then
            If enteredDate > DateTime.Now Then
                MessageBox.Show("The date cannot be greater than today's date.", "Invalid Date", MessageBoxButtons.OK, MessageBoxIcon.Error)
                TxtDate.Text = DateTime.Now.ToString("yyyy-MM-dd")
            End If
        Else
            MessageBox.Show("Invalid date format.", "Invalid Date", MessageBoxButtons.OK, MessageBoxIcon.Error)
        End If
    End Sub

    ' Insert new invoice into the database
    Private Sub BtnNew_Click(sender As Object, e As EventArgs) Handles BtnNew.Click
        DataGridView1.Rows.Clear()
        ComboBox2.SelectedIndex = -1
        TxtName.Clear()
        TxtAddress.Clear()
        TxtDate.Text = DateTime.Now.ToString("yyyy-MM-dd")
        SetEditMode(True)
    End Sub

    ' Save modifications to the database
    Private Sub BtnSave_Click(sender As Object, e As EventArgs) Handles BtnSave.Click
        Try
            Dim selectedInvNo As Integer
            If ComboBox1.SelectedIndex = -1 Then
                ' Insert new invoice
                Using Command As New SqlCommand("INSERT INTO Inv_Header (Inv_Date, Inv_Cust) OUTPUT INSERTED.Inv_No VALUES (@Inv_Date, @Inv_Cust)", Connection)
                    Command.Parameters.AddWithValue("@Inv_Date", TxtDate.Text)
                    Command.Parameters.AddWithValue("@Inv_Cust", ComboBox2.SelectedItem?.ToString())

                    selectedInvNo = Convert.ToInt32(Command.ExecuteScalar())
                End Using
            Else
                ' Update existing invoice
                selectedInvNo = Convert.ToInt32(ComboBox1.SelectedItem.ToString())
                Using Command As New SqlCommand("UPDATE Inv_Header SET Inv_Date = @Inv_Date, Inv_Cust = @Inv_Cust WHERE Inv_No = @Inv_No", Connection)
                    Command.Parameters.AddWithValue("@Inv_Date", TxtDate.Text)
                    Command.Parameters.AddWithValue("@Inv_Cust", ComboBox2.SelectedItem?.ToString())
                    Command.Parameters.AddWithValue("@Inv_No", selectedInvNo)
                    Command.ExecuteNonQuery()
                End Using

                ' Delete existing Inv_Detail records for the invoice
                Using Command As New SqlCommand("DELETE FROM Inv_Detail WHERE Inv_No = @Inv_No", Connection)
                    Command.Parameters.AddWithValue("@Inv_No", selectedInvNo)
                    Command.ExecuteNonQuery()
                End Using
            End If

            ' Insert updated Inv_Detail records
            For Each row As DataGridViewRow In DataGridView1.Rows
                If Not row.IsNewRow Then
                    Dim prdCd As String = row.Cells("PrdCd").Value?.ToString()
                    Dim qty As Decimal = 0
                    Dim amount As Decimal = 0

                    If String.IsNullOrEmpty(prdCd) OrElse Not Decimal.TryParse(row.Cells("Qty").Value?.ToString(), qty) OrElse Not Decimal.TryParse(row.Cells("Amount").Value?.ToString(), amount) Then
                        MessageBox.Show("Invalid row data. Skipping row.", "Validation Error", MessageBoxButtons.OK, MessageBoxIcon.Warning)
                        Continue For
                    End If

                    Using Comm As New SqlCommand("INSERT INTO Inv_Detail (Inv_No, Inv_Lno, Inv_Prod, Inv_Qty, Inv_Price) VALUES (@Inv_No, @Inv_Lno, @Inv_Prod, @Inv_Qty, @Inv_Price)", Connection)
                        Comm.Parameters.AddWithValue("@Inv_No", selectedInvNo)
                        Comm.Parameters.AddWithValue("@Inv_Lno", row.Cells("Lno").Value)
                        Comm.Parameters.AddWithValue("@Inv_Prod", prdCd)
                        Comm.Parameters.AddWithValue("@Inv_Qty", qty)
                        Comm.Parameters.AddWithValue("@Inv_Price", amount)

                        Comm.ExecuteNonQuery()
                    End Using
                End If
            Next

            ' Refresh the invoice numbers in ComboBox1
            PopulateInv_No()

            MessageBox.Show("Data successfully saved to the database.")
            SetEditMode(False)
        Catch ex As Exception
            MessageBox.Show("Error: " & ex.Message)
        End Try
    End Sub

    ' Populate DataGridView with the details of the selected invoice
    Private Sub ComboBox1_SelectedIndexChanged(sender As Object, e As EventArgs) Handles ComboBox1.SelectedIndexChanged
        If ComboBox1.SelectedItem Is Nothing Then Return

        Dim selectedInvNo As Integer = Convert.ToInt32(ComboBox1.SelectedItem.ToString())

        Try
            ' Fetch invoice details
            Using Command As New SqlCommand("SELECT Inv_Lno, Inv_Prod, Inv_Qty, Inv_Price FROM Inv_Detail WHERE Inv_No = @Inv_No", Connection)
                Command.Parameters.AddWithValue("@Inv_No", selectedInvNo)
                Using Reader As SqlDataReader = Command.ExecuteReader()
                    DataGridView1.Rows.Clear()
                    While Reader.Read()
                        Dim rowIndex As Integer = DataGridView1.Rows.Add()
                        DataGridView1.Rows(rowIndex).Cells("Lno").Value = Reader("Inv_Lno")
                        DataGridView1.Rows(rowIndex).Cells("PrdCd").Value = Reader("Inv_Prod")
                        DataGridView1.Rows(rowIndex).Cells("Qty").Value = Reader("Inv_Qty")
                        DataGridView1.Rows(rowIndex).Cells("Unit_Price").Value = Reader("Inv_Price")
                        DataGridView1.Rows(rowIndex).Cells("Amount").Value = Convert.ToDecimal(Reader("Inv_Qty")) * Convert.ToDecimal(Reader("Inv_Price"))

                        ' Fetch and display product details
                        FetchProductDetails(Reader("Inv_Prod").ToString(), rowIndex)
                    End While
                End Using
            End Using

            ' Fetch and display customer details for the selected invoice
            Using Command As New SqlCommand("SELECT Inv_Cust FROM Inv_Header WHERE Inv_No = @Inv_No", Connection)
                Command.Parameters.AddWithValue("@Inv_No", selectedInvNo)
                Using Reader As SqlDataReader = Command.ExecuteReader()
                    If Reader.Read() Then
                        Dim custCode As String = Reader("Inv_Cust").ToString()
                        ComboBox2.SelectedItem = custCode
                    End If
                End Using
            End Using

            ' Fetch and display customer details
            FetchCustomerDetails(ComboBox2.SelectedItem.ToString())

            UpdateTotalAmount()
            SetEditMode(False)
        Catch ex As Exception
            MessageBox.Show("Error fetching invoice details: " & ex.Message)
        End Try
    End Sub

    ' Fetch product details and update DataGridView row
    Private Sub FetchProductDetails(prodCode As String, rowIndex As Integer)
        Using Command As New SqlCommand("SELECT Prod_Name, Prod_Price FROM dbo.Product WHERE Prod_Code = @Prod_Code", Connection)
            Command.Parameters.AddWithValue("@Prod_Code", prodCode)
            Using Reader As SqlDataReader = Command.ExecuteReader()
                If Reader.Read() Then
                    DataGridView1.Rows(rowIndex).Cells("Description").Value = Reader("Prod_Name").ToString()
                    DataGridView1.Rows(rowIndex).Cells("Unit_Price").Value = Reader("Prod_Price").ToString()
                End If
            End Using
        End Using
    End Sub

    ' Fetch customer details and update TextBoxes
    Private Sub FetchCustomerDetails(custCode As String)
        Using Command As New SqlCommand("SELECT Cust_Name, Cust_Add1 FROM Customer WHERE Cust_Code = @CustCode", Connection)
            Command.Parameters.AddWithValue("@CustCode", custCode)
            Using Reader As SqlDataReader = Command.ExecuteReader()
                If Reader.Read() Then
                    TxtName.Text = Reader("Cust_Name").ToString()
                    TxtAddress.Text = Reader("Cust_Add1").ToString()
                End If
            End Using
        End Using
    End Sub

    ' Load selected invoice details for editing
    Private Sub BtnModify_Click(sender As Object, e As EventArgs) Handles BtnModify.Click
        SetEditMode(True)
    End Sub

    ' Set the edit mode for the form
    Private Sub SetEditMode(isEditable As Boolean)
        DataGridView1.ReadOnly = Not isEditable
        ComboBox2.Enabled = isEditable
        TxtDate.Enabled = isEditable

        BtnNew.Visible = Not isEditable
        BtnModify.Visible = Not isEditable
        BtnSave.Visible = isEditable
        BtnCancel.Visible = isEditable

        If isEditable Then
            ' Add delete button to each row
            If Not DataGridView1.Columns.Contains("Delete") Then
                Dim deleteButton As New DataGridViewButtonColumn()
                deleteButton.Name = "Delete"
                deleteButton.HeaderText = ""
                deleteButton.Text = "Delete"
                deleteButton.UseColumnTextForButtonValue = True
                DataGridView1.Columns.Insert(0, deleteButton)
            End If
        Else
            ' Remove delete button from each row
            If DataGridView1.Columns.Contains("Delete") Then
                DataGridView1.Columns.Remove("Delete")
            End If
        End If
    End Sub

    ' Handle delete button click in DataGridView
    Private Sub DataGridView1_CellContentClick(sender As Object, e As DataGridViewCellEventArgs) Handles DataGridView1.CellContentClick
        If e.ColumnIndex = DataGridView1.Columns("Delete").Index AndAlso e.RowIndex >= 0 Then
            DataGridView1.Rows.RemoveAt(e.RowIndex)
            UpdateTotalAmount()
        End If
    End Sub

    ' Cancel editing
    Private Sub BtnCancel_Click(sender As Object, e As EventArgs) Handles BtnCancel.Click
        SetEditMode(False)
        If ComboBox1.SelectedIndex >= 0 Then
            ComboBox1_SelectedIndexChanged(sender, e)
        Else
            DataGridView1.Rows.Clear()
            ComboBox2.SelectedIndex = -1
            TxtName.Clear()
            TxtAddress.Clear()
            TxtDate.Clear()
        End If
    End Sub

    ' Query button to display the customer with maximum sales in the last 6 months
    Private Sub BtnQuery_Click(sender As Object, e As EventArgs) Handles BtnQuery.Click
        Using Command As New SqlCommand("SELECT TOP 1 C.Cust_Name, SUM(D.Inv_Price * D.Inv_Qty) AS TotalSales " &
                                        "FROM Inv_Header H " &
                                        "JOIN Inv_Detail D ON H.Inv_No = D.Inv_No " &
                                        "JOIN Customer C ON H.Inv_Cust = C.Cust_Code " &
                                        "WHERE H.Inv_Date >= DATEADD(MONTH, -6, GETDATE()) " &
                                        "GROUP BY C.Cust_Name " &
                                        "ORDER BY TotalSales DESC", Connection)
            Using Reader As SqlDataReader = Command.ExecuteReader()
                If Reader.Read() Then
                    MessageBox.Show("Customer with Maximum Sales in Last 6 Months: " & Reader("Cust_Name").ToString() & vbCrLf &
                                    "Total Sales: " & Convert.ToDecimal(Reader("TotalSales")).ToString("F2"), "Query Result", MessageBoxButtons.OK, MessageBoxIcon.Information)
                Else
                    MessageBox.Show("No sales data found for the last 6 months.", "Query Result", MessageBoxButtons.OK, MessageBoxIcon.Information)
                End If
            End Using
        End Using
    End Sub

End Class
